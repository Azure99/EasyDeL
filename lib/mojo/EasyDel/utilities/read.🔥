from python import Python as Py


struct FileBuffer[T: DType]:
    var data: DTypePointer[DType.uint8]
    var offset: Int
    var size: Int

    fn __init__(inout self):
        self.data = DTypePointer[DType.uint8].alloc(0)
        self.offset = 0
        self.size = 0

    fn move_offset(inout self: Self, size: Int) raises:
        let dmf: Int = self.offset + size
        if dmf > self.size:
            raise Error(
                "Out of bounderies you can not move offset [Out of Range Data!]"
            )
        else:
            self.offset += size

    fn read_values(inout self: Self, size: Int) raises -> DTypePointer[T]:
        let res = self.data.offset(size).bitcast[T]()

        self.move_offset(sizeof[T]() + size)
        return res

    fn get_offset(self: Self) -> Int:
        return self.offset if self.offset < self.size else self.size


fn read_numerical_value[T: DType](inout buffer: FileBuffer[T]) -> SIMD[T, 1]:
    let res: SIMD[T, 1] = buffer.data.offset(buffer.offset).bitcast[T]().load(0)
    buffer.offset += sizeof[T]()
    return res


fn read_string_value[
    T: DType
](inout buffer: FileBuffer[T], string_length: Int) -> Pointer[UInt8]:
    let str = Pointer[UInt8].alloc(string_length + 1)
    for i in range(string_length):
        str.store(i, buffer.data.offset(buffer.offset).load(0))
        buffer.offset += 1
    str.store(string_length, 0)
    return str


fn read_file[T: DType](inout buffer: FileBuffer[T], filename: StringRef) raises -> None:
    let _os = Py.import_module("os")
    let size: Int = atol(_os.path.getsize(filename).to_string())
    let state_buffer: DTypePointer[DType.uint8] = DTypePointer[DType.uint8]().alloc(
        size
    )
    let f = File(filename)
    var reader = BufReader[4096](f ^)
    var bytes_read: Int = 1
    var offset: Int = 0
    while bytes_read > 0:
        let _bu_s = Buffer[4096, DType.uint8](state_buffer.offset(offset))
        bytes_read = reader.read(_bu_s)
        offset += bytes_read
    reader.do_nothing()
    buffer.data = state_buffer
    buffer.offset = 0
    buffer.size = size
    return None
