from ..utilities import FileBuffer
from ..array import Array, ArrayShape, PointerOperation
from ..linen import rms_norm, rope, dot_product_attention
from runtime.llcl import num_cores
import math
from algorithm.functional import parallelize
from ..linen import linear


struct LlamaConfig:
    var hidden_size: Int
    var num_attention_heads: Int
    var num_hidden_layers: Int
    var vocab_size: Int
    var epsilon: Float32
    var number_rep_kv: Int
    var max_position_embeddings: Int
    var num_key_value_heads: Int
    var head_dims: Int
    var kv_dims: Int
    var intermediate_size: Int

    fn __init__(
        inout self: Self,
        hidden_size: Int,
        num_attention_heads: Int,
        num_hidden_layers: Int,
        vocab_size: Int,
        epsilon: Float32,
        number_rep_kv: Int,
        max_position_embeddings: Int,
        num_key_value_heads: Int,
        intermediate_size: Int,
    ) -> None:
        self.hidden_size = hidden_size
        self.max_position_embeddings = max_position_embeddings
        self.num_attention_heads = num_attention_heads
        self.num_hidden_layers = num_hidden_layers
        self.vocab_size = vocab_size
        self.epsilon = epsilon
        self.number_rep_kv = number_rep_kv
        self.num_key_value_heads = num_key_value_heads
        self.intermediate_size = intermediate_size
        self.head_dims = hidden_size // num_attention_heads
        self.kv_dims = hidden_size // num_key_value_heads

    fn __init__(inout self: Self) -> None:
        self.hidden_size = 512
        self.max_position_embeddings = 2048
        self.num_attention_heads = 8
        self.num_hidden_layers = 8
        self.vocab_size = 32000
        self.epsilon = 1e-5
        self.number_rep_kv = 1
        self.num_key_value_heads = 1
        self.intermediate_size = self.hidden_size * 4
        self.head_dims = self.hidden_size // self.num_attention_heads
        self.kv_dims = self.hidden_size // self.num_key_value_heads

    fn __init__(inout self: Self, inout buffer: FileBuffer) raises -> None:
        self.hidden_size = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)
        self.intermediate_size = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)
        self.num_hidden_layers = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)
        self.num_attention_heads = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)
        self.num_key_value_heads = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)

        self.vocab_size = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)
        self.max_position_embeddings = (
            buffer.data.offset(buffer.offset).bitcast[DType.int32]().load(0).to_int()
        )
        buffer.move_offset(4)
        self.head_dims = self.hidden_size // self.num_attention_heads
        self.kv_dims = (
            self.num_key_value_heads * self.hidden_size
        ) // self.num_attention_heads
        self.number_rep_kv = self.num_attention_heads // self.num_key_value_heads
        self.epsilon = 1e-5
        return None

    fn print_config(self: Self) -> None:
        print("\033[1;36mHidden Size             : ", self.hidden_size)
        print("Max Position Embeddings : ", self.max_position_embeddings)
        print("Num Attention Heads     : ", self.num_attention_heads)
        print("Num Hidden Layers       : ", self.num_hidden_layers)
        print("Vocab Size              : ", self.vocab_size)
        print("RMS Norm Epsilon        : ", self.epsilon)
        print("Number Repeat Key Value : ", self.number_rep_kv)
        print("Number Key Value Heads  : ", self.num_key_value_heads)
        print("Intermediate Size       : ", self.intermediate_size)
        print("HEAD DIMS               : ", self.head_dims)
        print("KV DIMS                 : ", self.kv_dims)
        print_no_newline("\033[1;0m")


struct LlamaWeights[T: DType]:
    var wte: Array[T]
    var fcr: Array[T]
    var fci: Array[T]
    var input_layernorm: Array[T]
    var q_proj: Array[T]
    var k_proj: Array[T]
    var v_proj: Array[T]
    var o_proj: Array[T]
    var post_layernorm: Array[T]
    var w1: Array[T]
    var w3: Array[T]
    var w2: Array[T]
    var norm: Array[T]
    var lm_head: Array[T]

    fn __init__(
        inout self,
        config: LlamaConfig,
        shared_weights: Bool,
        inout buf: FileBuffer,
    ) raises:
        let size: Int = sizeof[T]()
        self.wte = Array[T](
            buf.read_numerical_value_dynamic[T](config.hidden_size * config.vocab_size),
            config.vocab_size,
            config.hidden_size,
        )

        self.input_layernorm = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.hidden_size * config.num_hidden_layers
            ),
            config.hidden_size,
            config.num_hidden_layers,
        )

        self.q_proj = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.hidden_size * config.hidden_size
            ),
            config.num_hidden_layers,
            config.hidden_size,
            config.hidden_size,
        )

        self.k_proj = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.kv_dims * config.hidden_size
            ),
            config.num_hidden_layers,
            config.kv_dims,
            config.hidden_size,
        )

        self.v_proj = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.kv_dims * config.hidden_size
            ),
            config.num_hidden_layers,
            config.kv_dims,
            config.hidden_size,
        )

        self.o_proj = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.hidden_size * config.hidden_size
            ),
            config.num_hidden_layers,
            config.hidden_size,
            config.hidden_size,
        )

        self.post_layernorm = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.hidden_size * config.num_hidden_layers
            ),
            config.hidden_size,
            config.num_hidden_layers,
        )

        self.w1 = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.hidden_size * config.intermediate_size
            ),
            config.num_hidden_layers,
            config.hidden_size,
            config.intermediate_size,
        )

        self.w2 = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.hidden_size * config.intermediate_size
            ),
            config.num_hidden_layers,
            config.hidden_size,
            config.intermediate_size,
        )

        self.w3 = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.num_hidden_layers * config.hidden_size * config.intermediate_size
            ),
            config.num_hidden_layers,
            config.hidden_size,
            config.intermediate_size,
        )

        self.norm = Array[T](
            buf.read_numerical_value_dynamic[T](config.hidden_size),
            config.hidden_size,
        )

        self.fcr = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.max_position_embeddings * (config.head_dims // 2)
            ),
            config.max_position_embeddings,
            config.head_dims // 2,
        )

        self.fci = Array[T](
            buf.read_numerical_value_dynamic[T](
                config.max_position_embeddings * (config.head_dims // 2)
            ),
            config.max_position_embeddings,
            config.head_dims // 2,
        )

        self.lm_head = Array[T](config.vocab_size, config.hidden_size)
        if shared_weights:
            self.lm_head.set_data_from_buffer(self.wte.data)
        else:
            self.lm_head.set_data_from_buffer(
                buf.read_numerical_value_dynamic[T](self.lm_head.num_elements())
            )


struct LlamaState[T: DType]:
    # State
    var hidden_state: Array[T]
    var ffd_out: Array[T]
    var x: Array[T]

    # Norms
    var input_layernorm: Array[T]
    var post_layernorm: Array[T]
    var norm: Array[T]

    # Attention Layer
    var k_cache: Array[T]
    var v_cache: Array[T]
    var q: Array[T]
    var k: Array[T]
    var v: Array[T]
    var o: Array[T]
    var attention: Array[T]

    # FeedForward
    var w1_C: Array[T]
    var w3_C: Array[T]

    # LM Head
    var logits: Array[T]

    # Number of cores
    var number_of_cores: Int

    fn __init__(inout self: Self, config: LlamaConfig):
        self.k_cache = Array[T](
            config.num_hidden_layers, config.max_position_embeddings, config.kv_dims
        )
        self.v_cache = Array[T](
            config.num_hidden_layers, config.max_position_embeddings, config.kv_dims
        )

        self.input_layernorm = Array[T](config.hidden_size)
        self.post_layernorm = Array[T](config.hidden_size)
        self.norm = Array[T](config.hidden_size)
        self.q = Array[T](1, config.num_attention_heads * config.head_dims)
        self.k = Array[T](1, config.num_key_value_heads * config.head_dims)
        self.v = Array[T](1, config.num_key_value_heads * config.head_dims)
        self.o = Array[T](1, config.hidden_size)
        self.attention = Array[T](
            config.num_attention_heads, config.max_position_embeddings
        )
        self.w1_C = Array[T](config.intermediate_size)
        self.w3_C = Array[T](config.intermediate_size)
        self.ffd_out = Array[T](config.hidden_size)
        self.hidden_state = Array[T](config.hidden_size)
        self.logits = Array[T](config.hidden_size, config.vocab_size)
        self.x = Array[T](config.hidden_size)

        self.x.alloc(0.0)

        self.v_cache.alloc(0.0)
        self.k_cache.alloc(0.0)

        self.attention.alloc(0.0)

        self.w1_C.alloc(0.0)
        self.w3_C.alloc(0.0)
        self.ffd_out.alloc(0.0)

        self.hidden_state.alloc(0.0)
        self.logits.alloc(0.0)

        self.q.alloc(0.0)
        self.o.alloc(0.0)

        self.number_of_cores = num_cores()
